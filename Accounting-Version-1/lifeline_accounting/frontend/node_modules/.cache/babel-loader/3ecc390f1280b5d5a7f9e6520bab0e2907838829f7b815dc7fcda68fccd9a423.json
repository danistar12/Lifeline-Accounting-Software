{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\naxios.defaults.withCredentials = true;\nexport default createStore({\n  state: {\n    user: {\n      token: localStorage.getItem('token') || '',\n      companies: []\n    },\n    selectedCompany: {\n      id: localStorage.getItem('selectedCompanyId') || null\n    }\n  },\n  mutations: {\n    setToken(state, token) {\n      state.user.token = token;\n      localStorage.setItem('token', token);\n    },\n    setUserCompanies(state, companies) {\n      state.user.companies = companies;\n    },\n    setSelectedCompany(state, companyId) {\n      state.selectedCompany.id = companyId;\n      localStorage.setItem('selectedCompanyId', companyId);\n    },\n    clearAuthData(state) {\n      state.user.token = '';\n      state.user.companies = [];\n      state.selectedCompany.id = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('selectedCompanyId');\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, authData) {\n      await axios.get('/api/accounts/auth/csrf/'); // Fetch CSRF token\n      const response = await axios.post('/api/accounts/auth/login/', authData);\n      commit('setToken', response.data.access); // We will get a new access token from the cookie\n      return response;\n    },\n    logout({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        axios.post('/api/accounts/auth/logout/').then(() => {\n          commit('clearAuthData');\n          resolve();\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    loadCompanyData({\n      state\n    }) {\n      // This is a placeholder for where you would load company specific data\n      console.log(`Loading data for company ${state.selectedCompany.id}`);\n    }\n  },\n  getters: {\n    isLoggedIn: state => !!state.user.token,\n    selectedCompanyId: state => state.selectedCompany.id\n  }\n});","map":{"version":3,"names":["createStore","axios","defaults","xsrfCookieName","xsrfHeaderName","withCredentials","state","user","token","localStorage","getItem","companies","selectedCompany","id","mutations","setToken","setItem","setUserCompanies","setSelectedCompany","companyId","clearAuthData","removeItem","actions","login","commit","authData","get","response","post","data","access","logout","Promise","resolve","reject","then","catch","error","loadCompanyData","console","log","getters","isLoggedIn","selectedCompanyId"],"sources":["C:/Users/ds3297l/Desktop/Accountint Software/Design 2/lifeline_accounting/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken'\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\r\naxios.defaults.withCredentials = true\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: {\r\n      token: localStorage.getItem('token') || '',\r\n      companies: []\r\n    },\r\n    selectedCompany: {\r\n      id: localStorage.getItem('selectedCompanyId') || null,\r\n    }\r\n  },\r\n  mutations: {\r\n    setToken(state, token) {\r\n      state.user.token = token;\r\n      localStorage.setItem('token', token);\r\n    },\r\n    setUserCompanies(state, companies) {\r\n      state.user.companies = companies;\r\n    },\r\n    setSelectedCompany(state, companyId) {\r\n      state.selectedCompany.id = companyId;\r\n      localStorage.setItem('selectedCompanyId', companyId);\r\n    },\r\n    clearAuthData(state) {\r\n      state.user.token = '';\r\n      state.user.companies = [];\r\n      state.selectedCompany.id = null;\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('selectedCompanyId');\r\n    }\r\n  },\r\n  actions: {\r\n    async login({ commit }, authData) {\r\n        await axios.get('/api/accounts/auth/csrf/') // Fetch CSRF token\r\n        const response = await axios.post('/api/accounts/auth/login/', authData)\r\n        commit('setToken', response.data.access) // We will get a new access token from the cookie\r\n        return response\r\n    },\r\n    logout({ commit }) {\r\n      return new Promise((resolve, reject) => {\r\n        axios.post('/api/accounts/auth/logout/')\r\n          .then(() => {\r\n            commit('clearAuthData');\r\n            resolve();\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    loadCompanyData({ state }) {\r\n        // This is a placeholder for where you would load company specific data\r\n        console.log(`Loading data for company ${state.selectedCompany.id}`);\r\n    }\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.user.token,\r\n    selectedCompanyId: state => state.selectedCompany.id\r\n  }\r\n})\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,cAAc,GAAG,WAAW;AAC3CF,KAAK,CAACC,QAAQ,CAACE,cAAc,GAAG,aAAa;AAC7CH,KAAK,CAACC,QAAQ,CAACG,eAAe,GAAG,IAAI;AAErC,eAAeL,WAAW,CAAC;EACzBM,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;MAC1CC,SAAS,EAAE;IACb,CAAC;IACDC,eAAe,EAAE;MACfC,EAAE,EAAEJ,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,IAAI;IACnD;EACF,CAAC;EACDI,SAAS,EAAE;IACTC,QAAQA,CAACT,KAAK,EAAEE,KAAK,EAAE;MACrBF,KAAK,CAACC,IAAI,CAACC,KAAK,GAAGA,KAAK;MACxBC,YAAY,CAACO,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;IACtC,CAAC;IACDS,gBAAgBA,CAACX,KAAK,EAAEK,SAAS,EAAE;MACjCL,KAAK,CAACC,IAAI,CAACI,SAAS,GAAGA,SAAS;IAClC,CAAC;IACDO,kBAAkBA,CAACZ,KAAK,EAAEa,SAAS,EAAE;MACnCb,KAAK,CAACM,eAAe,CAACC,EAAE,GAAGM,SAAS;MACpCV,YAAY,CAACO,OAAO,CAAC,mBAAmB,EAAEG,SAAS,CAAC;IACtD,CAAC;IACDC,aAAaA,CAACd,KAAK,EAAE;MACnBA,KAAK,CAACC,IAAI,CAACC,KAAK,GAAG,EAAE;MACrBF,KAAK,CAACC,IAAI,CAACI,SAAS,GAAG,EAAE;MACzBL,KAAK,CAACM,eAAe,CAACC,EAAE,GAAG,IAAI;MAC/BJ,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;MAChCZ,YAAY,CAACY,UAAU,CAAC,mBAAmB,CAAC;IAC9C;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEC,QAAQ,EAAE;MAC9B,MAAMxB,KAAK,CAACyB,GAAG,CAAC,0BAA0B,CAAC,EAAC;MAC5C,MAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,2BAA2B,EAAEH,QAAQ,CAAC;MACxED,MAAM,CAAC,UAAU,EAAEG,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,EAAC;MACzC,OAAOH,QAAQ;IACnB,CAAC;IACDI,MAAMA,CAAC;MAAEP;IAAO,CAAC,EAAE;MACjB,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCjC,KAAK,CAAC2B,IAAI,CAAC,4BAA4B,CAAC,CACrCO,IAAI,CAAC,MAAM;UACVX,MAAM,CAAC,eAAe,CAAC;UACvBS,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;UACdH,MAAM,CAACG,KAAK,CAAC;QACf,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC;IACDC,eAAeA,CAAC;MAAEhC;IAAM,CAAC,EAAE;MACvB;MACAiC,OAAO,CAACC,GAAG,CAAC,4BAA4BlC,KAAK,CAACM,eAAe,CAACC,EAAE,EAAE,CAAC;IACvE;EACF,CAAC;EACD4B,OAAO,EAAE;IACPC,UAAU,EAAEpC,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,IAAI,CAACC,KAAK;IACvCmC,iBAAiB,EAAErC,KAAK,IAAIA,KAAK,CAACM,eAAe,CAACC;EACpD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}