{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $options.companies && $options.companies.length ? _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n    key: 0,\n    \"class\": \"form-select\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $options.selectedCompany = $event;\n    }),\n    onChange: _cache[1] || (_cache[1] = function () {\n      return $options.updateCompany && $options.updateCompany.apply($options, arguments);\n    })\n  }, [_createCommentVNode(\" Placeholder when no company selected \"), _cache[2] || (_cache[2] = _createElementVNode(\"option\", {\n    disabled: \"\",\n    value: \"\"\n  }, \"Select Company\", -1 /* CACHED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.companies, function (company) {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: company.company_id,\n      key: company.company_id\n    }, _toDisplayString(company.company_name), 9 /* TEXT, PROPS */, _hoisted_1);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */)), [[_vModelSelect, $options.selectedCompany]]) : _ctx.isLoggedIn ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Show loading placeholder if companies not yet loaded \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", null, \"Loading companies...\", -1 /* CACHED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["$options","companies","length","_createElementBlock","selectedCompany","$event","onChange","_cache","updateCompany","apply","arguments","_createCommentVNode","_createElementVNode","disabled","value","_Fragment","_renderList","company","company_id","key","company_name","_hoisted_1","_ctx","isLoggedIn"],"sources":["C:\\Users\\DLloy\\OneDrive\\Desktop\\Data_Centers\\Lifeline Accounting Software\\Accounting-Version-1\\lifeline_accounting\\frontend\\src\\components\\CompanySelector.vue"],"sourcesContent":["<template>\r\n  <select\r\n    v-if=\"companies && companies.length\"\r\n    class=\"form-select\"\r\n    v-model=\"selectedCompany\"\r\n    @change=\"updateCompany\"\r\n  >\r\n    <!-- Placeholder when no company selected -->\r\n    <option disabled value=\"\">Select Company</option>\r\n    <option\r\n      v-for=\"company in companies\"\r\n      :value=\"company.company_id\"\r\n      :key=\"company.company_id\"\r\n    >\r\n      {{ company.company_name }}\r\n    </option>\r\n  </select>\r\n  <!-- Show loading placeholder if companies not yet loaded -->\r\n  <div v-else-if=\"isLoggedIn\">Loading companies...</div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  computed: {\r\n    ...mapGetters(['isLoggedIn']),\r\n    companies() {\r\n      return this.$store.state.user?.companies || [];\r\n    },\r\n    selectedCompany: {\r\n      get() {\r\n        return this.$store.state.selectedCompany.id;\r\n      },\r\n      set(value) {\r\n        this.$store.commit('setSelectedCompany', value);\r\n      },\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions(['loadCompanyData']),\r\n    updateCompany() {\r\n      // Set the company ID header for API requests\r\n      axios.defaults.headers.common['X-Company-ID'] = this.selectedCompany;\r\n      // Load company-specific data\r\n      this.loadCompanyData();\r\n    },\r\n  },\r\n  mounted() {\r\n    // If user is logged in but no companies loaded, try to load them\r\n    if (this.isLoggedIn && (!this.companies || this.companies.length === 0)) {\r\n      this.$store.dispatch('loadCompanies');\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;;SAEUA,QAAA,CAAAC,SAAS,IAAID,QAAA,CAAAC,SAAS,CAACC,MAAM,G,+BADrCC,mBAAA,CAeS;;IAbP,SAAM,aAAa;;aACVH,QAAA,CAAAI,eAAe,GAAAC,MAAA;IAAA;IACvBC,QAAM,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEP,QAAA,CAAAQ,aAAA,IAAAR,QAAA,CAAAQ,aAAA,CAAAC,KAAA,CAAAT,QAAA,EAAAU,SAAA,CAAa;IAAA;MAEtBC,mBAAA,0CAA6C,E,0BAC7CC,mBAAA,CAAiD;IAAzCC,QAAQ,EAAR,EAAQ;IAACC,KAAK,EAAC;KAAG,gBAAc,sB,kBACxCX,mBAAA,CAMSY,SAAA,QAAAC,WAAA,CALWhB,QAAA,CAAAC,SAAS,YAApBgB,OAAO;yBADhBd,mBAAA,CAMS;MAJNW,KAAK,EAAEG,OAAO,CAACC,UAAU;MACzBC,GAAG,EAAEF,OAAO,CAACC;wBAEXD,OAAO,CAACG,YAAY,wBAAAC,UAAA;4FAVhBrB,QAAA,CAAAI,eAAe,E,IAcVkB,IAAA,CAAAC,UAAU,I,cAA1BpB,mBAAA,CAAsDY,SAAA;IAAAI,GAAA;EAAA,IADtDR,mBAAA,0DAA6D,E,0BAC7DC,mBAAA,CAAsD,aAA1B,sBAAoB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}