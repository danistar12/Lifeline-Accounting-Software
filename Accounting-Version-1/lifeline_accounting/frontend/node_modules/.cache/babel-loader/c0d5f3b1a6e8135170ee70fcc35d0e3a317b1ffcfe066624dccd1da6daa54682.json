{"ast":null,"code":"import _regenerator from \"C:/Users/ds3297l/Desktop/Accountint Software/Design 2/lifeline_accounting/frontend/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ds3297l/Desktop/Accountint Software/Design 2/lifeline_accounting/frontend/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\naxios.defaults.withCredentials = true;\nexport default createStore({\n  state: {\n    user: null,\n    selectedCompany: {\n      id: localStorage.getItem('selectedCompanyId') || null\n    }\n  },\n  mutations: {\n    setUser: function setUser(state, user) {\n      state.user = user;\n    },\n    setToken: function setToken(state, token) {\n      // This mutation is no longer needed for auth, but can be kept if used elsewhere.\n    },\n    setUserCompanies: function setUserCompanies(state, companies) {\n      if (state.user) {\n        state.user.companies = companies;\n      }\n    },\n    setSelectedCompany: function setSelectedCompany(state, companyId) {\n      state.selectedCompany.id = companyId;\n      localStorage.setItem('selectedCompanyId', companyId);\n    },\n    clearAuthData: function clearAuthData(state) {\n      state.user = null;\n      state.selectedCompany.id = null;\n      localStorage.removeItem('selectedCompanyId');\n    }\n  },\n  actions: {\n    login: function login(_ref, authData) {\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var dispatch;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              dispatch = _ref.dispatch;\n              _context.n = 1;\n              return axios.get('http://localhost:8000/api/accounts/auth/csrf/');\n            case 1:\n              _context.n = 2;\n              return axios.post('http://localhost:8000/api/accounts/auth/login/', authData);\n            case 2:\n              return _context.a(2, dispatch('me'));\n          }\n        }, _callee);\n      }))();\n    },\n    me: function me(_ref2) {\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var commit, response, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.p = 1;\n              _context2.n = 2;\n              return axios.get('http://localhost:8000/api/accounts/auth/user/');\n            case 2:\n              response = _context2.v;\n              commit('setUser', response.data);\n              return _context2.a(2, response.data);\n            case 3:\n              _context2.p = 3;\n              _t = _context2.v;\n              commit('clearAuthData');\n              throw _t;\n            case 4:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 3]]);\n      }))();\n    },\n    logout: function logout(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        axios.post('http://localhost:8000/api/accounts/auth/logout/').then(function () {\n          commit('clearAuthData');\n          resolve();\n        })[\"catch\"](function (error) {\n          reject(error);\n        });\n      });\n    },\n    loadCompanyData: function loadCompanyData(_ref4) {\n      var state = _ref4.state;\n      // This is a placeholder for where you would load company specific data\n      console.log(\"Loading data for company \".concat(state.selectedCompany.id));\n    }\n  },\n  getters: {\n    isLoggedIn: function isLoggedIn(state) {\n      return !!state.user;\n    },\n    selectedCompanyId: function selectedCompanyId(state) {\n      return state.selectedCompany.id;\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","defaults","xsrfCookieName","xsrfHeaderName","withCredentials","state","user","selectedCompany","id","localStorage","getItem","mutations","setUser","setToken","token","setUserCompanies","companies","setSelectedCompany","companyId","setItem","clearAuthData","removeItem","actions","login","_ref","authData","_asyncToGenerator","_regenerator","m","_callee","dispatch","w","_context","n","get","post","a","me","_ref2","_callee2","commit","response","_t","_context2","p","v","data","logout","_ref3","Promise","resolve","reject","then","error","loadCompanyData","_ref4","console","log","concat","getters","isLoggedIn","selectedCompanyId"],"sources":["C:/Users/ds3297l/Desktop/Accountint Software/Design 2/lifeline_accounting/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken'\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\r\naxios.defaults.withCredentials = true\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: null,\r\n    selectedCompany: {\r\n      id: localStorage.getItem('selectedCompanyId') || null,\r\n    }\r\n  },\r\n  mutations: {\r\n    setUser(state, user) {\r\n      state.user = user;\r\n    },\r\n    setToken(state, token) {\r\n      // This mutation is no longer needed for auth, but can be kept if used elsewhere.\r\n    },\r\n    setUserCompanies(state, companies) {\r\n      if (state.user) {\r\n        state.user.companies = companies;\r\n      }\r\n    },\r\n    setSelectedCompany(state, companyId) {\r\n      state.selectedCompany.id = companyId;\r\n      localStorage.setItem('selectedCompanyId', companyId);\r\n    },\r\n    clearAuthData(state) {\r\n      state.user = null;\r\n      state.selectedCompany.id = null;\r\n      localStorage.removeItem('selectedCompanyId');\r\n    }\r\n  },\r\n  actions: {\r\n    async login({ dispatch }, authData) {\r\n        await axios.get('http://localhost:8000/api/accounts/auth/csrf/');\r\n        await axios.post('http://localhost:8000/api/accounts/auth/login/', authData);\r\n        return dispatch('me');\r\n    },\r\n    async me({ commit }) {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/accounts/auth/user/');\r\n        commit('setUser', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        commit('clearAuthData');\r\n        throw error;\r\n      }\r\n    },\r\n    logout({ commit }) {\r\n      return new Promise((resolve, reject) => {\r\n        axios.post('http://localhost:8000/api/accounts/auth/logout/')\r\n          .then(() => {\r\n            commit('clearAuthData');\r\n            resolve();\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    loadCompanyData({ state }) {\r\n        // This is a placeholder for where you would load company specific data\r\n        console.log(`Loading data for company ${state.selectedCompany.id}`);\r\n    }\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.user,\r\n    selectedCompanyId: state => state.selectedCompany.id\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}