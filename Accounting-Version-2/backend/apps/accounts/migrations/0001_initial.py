# Generated by Django 5.2.4 on 2025-07-15 20:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChartOfAccounts',
            fields=[
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('account_code', models.CharField(max_length=20)),
                ('account_name', models.CharField(max_length=255)),
                ('account_type', models.CharField(max_length=50)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
            ],
            options={
                'db_table': 'ChartOfAccounts',
            },
        ),
        migrations.CreateModel(
            name='GeneralLedger',
            fields=[
                ('transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('debit', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('credit', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
            ],
            options={
                'db_table': 'GeneralLedger',
            },
        ),
        migrations.CreateModel(
            name='UserCompanyRole',
            fields=[
                ('user_company_role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'UserCompanyRole',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set_accounts', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set_accounts', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
